# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumSkuSkuType {
  Item
  Package
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createSku(data: SkuCreateInput!): Sku!
  createSkuGroup(data: SkuGroupCreateInput!): SkuGroup!
  createSkuPackage(data: SkuPackageCreateInput!): SkuPackage!
  createSkuSubGroupId(data: SkuSubGroupIdCreateInput!): SkuSubGroupId!
  createUser(data: UserCreateInput!): User!
  deleteSku(where: SkuWhereUniqueInput!): Sku!
  deleteSkuGroup(where: SkuGroupWhereUniqueInput!): SkuGroup!
  deleteSkuPackage(where: SkuPackageWhereUniqueInput!): SkuPackage!
  deleteSkuSubGroupId(where: SkuSubGroupIdWhereUniqueInput!): SkuSubGroupId!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateSku(data: SkuUpdateInput!, where: SkuWhereUniqueInput!): Sku!
  updateSkuGroup(data: SkuGroupUpdateInput!, where: SkuGroupWhereUniqueInput!): SkuGroup!
  updateSkuPackage(data: SkuPackageUpdateInput!, where: SkuPackageWhereUniqueInput!): SkuPackage!
  updateSkuSubGroupId(data: SkuSubGroupIdUpdateInput!, where: SkuSubGroupIdWhereUniqueInput!): SkuSubGroupId!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _skuGroupsMeta(orderBy: [SkuGroupOrderByInput!], skip: Float, take: Float, where: SkuGroupWhereInput): MetaQueryPayload!
  _skuPackagesMeta(orderBy: [SkuPackageOrderByInput!], skip: Float, take: Float, where: SkuPackageWhereInput): MetaQueryPayload!
  _skuSubGroupIdsMeta(orderBy: [SkuSubGroupIdOrderByInput!], skip: Float, take: Float, where: SkuSubGroupIdWhereInput): MetaQueryPayload!
  _skusMeta(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  sku(where: SkuWhereUniqueInput!): Sku
  skuGroup(where: SkuGroupWhereUniqueInput!): SkuGroup
  skuGroups(orderBy: [SkuGroupOrderByInput!], skip: Float, take: Float, where: SkuGroupWhereInput): [SkuGroup!]!
  skuPackage(where: SkuPackageWhereUniqueInput!): SkuPackage
  skuPackages(orderBy: [SkuPackageOrderByInput!], skip: Float, take: Float, where: SkuPackageWhereInput): [SkuPackage!]!
  skuSubGroupId(where: SkuSubGroupIdWhereUniqueInput!): SkuSubGroupId
  skuSubGroupIds(orderBy: [SkuSubGroupIdOrderByInput!], skip: Float, take: Float, where: SkuSubGroupIdWhereInput): [SkuSubGroupId!]!
  skus(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): [Sku!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Sku {
  createdAt: DateTime!
  fulfillmentInfo: JSONObject
  id: String!
  skuDescription: String
  skuGroupId: SkuGroup
  skuName: String
  skuPackages(orderBy: [SkuPackageOrderByInput!], skip: Float, take: Float, where: SkuPackageWhereInput): [SkuPackage!]!
  skuSubGroupId: SkuSubGroupId
  skuType: EnumSkuSkuType
  updatedAt: DateTime!
}

input SkuCreateInput {
  fulfillmentInfo: JSONObject
  skuDescription: String
  skuGroupId: SkuGroupWhereUniqueInput
  skuName: String
  skuPackages: SkuPackageCreateNestedManyWithoutSkusInput
  skuSubGroupId: SkuSubGroupIdWhereUniqueInput
  skuType: EnumSkuSkuType
}

input SkuCreateNestedManyWithoutSkuGroupsInput {
  connect: [SkuWhereUniqueInput!]
}

input SkuCreateNestedManyWithoutSkuSubGroupIdsInput {
  connect: [SkuWhereUniqueInput!]
}

type SkuGroup {
  createdAt: DateTime!
  id: String!
  skuGroupName: String
  skuSubGroups(orderBy: [SkuSubGroupIdOrderByInput!], skip: Float, take: Float, where: SkuSubGroupIdWhereInput): [SkuSubGroupId!]!
  skus(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): [Sku!]!
  updatedAt: DateTime!
}

input SkuGroupCreateInput {
  skuGroupName: String
  skuSubGroups: SkuSubGroupIdCreateNestedManyWithoutSkuGroupsInput
  skus: SkuCreateNestedManyWithoutSkuGroupsInput
}

input SkuGroupOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  skuGroupName: SortOrder
  updatedAt: SortOrder
}

input SkuGroupUpdateInput {
  skuGroupName: String
  skuSubGroups: SkuSubGroupIdUpdateManyWithoutSkuGroupsInput
  skus: SkuUpdateManyWithoutSkuGroupsInput
}

input SkuGroupWhereInput {
  id: StringFilter
  skuGroupName: StringNullableFilter
  skuSubGroups: SkuSubGroupIdListRelationFilter
  skus: SkuListRelationFilter
}

input SkuGroupWhereUniqueInput {
  id: String!
}

input SkuListRelationFilter {
  every: SkuWhereInput
  none: SkuWhereInput
  some: SkuWhereInput
}

input SkuOrderByInput {
  createdAt: SortOrder
  fulfillmentInfo: SortOrder
  id: SortOrder
  skuDescription: SortOrder
  skuGroupIdId: SortOrder
  skuName: SortOrder
  skuSubGroupIdId: SortOrder
  skuType: SortOrder
  updatedAt: SortOrder
}

type SkuPackage {
  createdAt: DateTime!
  id: String!
  inclusionSkuPrice: Float
  sku: Sku
  updatedAt: DateTime!
}

input SkuPackageCreateInput {
  inclusionSkuPrice: Float
  sku: SkuWhereUniqueInput
}

input SkuPackageCreateNestedManyWithoutSkusInput {
  connect: [SkuPackageWhereUniqueInput!]
}

input SkuPackageListRelationFilter {
  every: SkuPackageWhereInput
  none: SkuPackageWhereInput
  some: SkuPackageWhereInput
}

input SkuPackageOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  inclusionSkuPrice: SortOrder
  skuId: SortOrder
  updatedAt: SortOrder
}

input SkuPackageUpdateInput {
  inclusionSkuPrice: Float
  sku: SkuWhereUniqueInput
}

input SkuPackageUpdateManyWithoutSkusInput {
  connect: [SkuPackageWhereUniqueInput!]
  disconnect: [SkuPackageWhereUniqueInput!]
  set: [SkuPackageWhereUniqueInput!]
}

input SkuPackageWhereInput {
  id: StringFilter
  inclusionSkuPrice: FloatNullableFilter
  sku: SkuWhereUniqueInput
}

input SkuPackageWhereUniqueInput {
  id: String!
}

type SkuSubGroupId {
  createdAt: DateTime!
  id: String!
  skuGroupId: SkuGroup
  skuSubGroupName: String
  skus(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): [Sku!]!
  updatedAt: DateTime!
}

input SkuSubGroupIdCreateInput {
  skuGroupId: SkuGroupWhereUniqueInput
  skuSubGroupName: String
  skus: SkuCreateNestedManyWithoutSkuSubGroupIdsInput
}

input SkuSubGroupIdCreateNestedManyWithoutSkuGroupsInput {
  connect: [SkuSubGroupIdWhereUniqueInput!]
}

input SkuSubGroupIdListRelationFilter {
  every: SkuSubGroupIdWhereInput
  none: SkuSubGroupIdWhereInput
  some: SkuSubGroupIdWhereInput
}

input SkuSubGroupIdOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  skuGroupIdId: SortOrder
  skuSubGroupName: SortOrder
  updatedAt: SortOrder
}

input SkuSubGroupIdUpdateInput {
  skuGroupId: SkuGroupWhereUniqueInput
  skuSubGroupName: String
  skus: SkuUpdateManyWithoutSkuSubGroupIdsInput
}

input SkuSubGroupIdUpdateManyWithoutSkuGroupsInput {
  connect: [SkuSubGroupIdWhereUniqueInput!]
  disconnect: [SkuSubGroupIdWhereUniqueInput!]
  set: [SkuSubGroupIdWhereUniqueInput!]
}

input SkuSubGroupIdWhereInput {
  id: StringFilter
  skuSubGroupName: StringNullableFilter
  skus: SkuListRelationFilter
}

input SkuSubGroupIdWhereUniqueInput {
  id: String!
}

input SkuUpdateInput {
  fulfillmentInfo: JSONObject
  skuDescription: String
  skuGroupId: SkuGroupWhereUniqueInput
  skuName: String
  skuPackages: SkuPackageUpdateManyWithoutSkusInput
  skuSubGroupId: SkuSubGroupIdWhereUniqueInput
  skuType: EnumSkuSkuType
}

input SkuUpdateManyWithoutSkuGroupsInput {
  connect: [SkuWhereUniqueInput!]
  disconnect: [SkuWhereUniqueInput!]
  set: [SkuWhereUniqueInput!]
}

input SkuUpdateManyWithoutSkuSubGroupIdsInput {
  connect: [SkuWhereUniqueInput!]
  disconnect: [SkuWhereUniqueInput!]
  set: [SkuWhereUniqueInput!]
}

input SkuWhereInput {
  fulfillmentInfo: JsonFilter
  id: StringFilter
  skuDescription: StringNullableFilter
  skuGroupId: SkuGroupWhereUniqueInput
  skuName: StringNullableFilter
  skuPackages: SkuPackageListRelationFilter
  skuSubGroupId: SkuSubGroupIdWhereUniqueInput
  skuType: EnumSkuSkuType
}

input SkuWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  uid: String
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  uid: String
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  uid: String
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  uid: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
