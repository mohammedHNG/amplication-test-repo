# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumSkuSkuType {
  Item
  Package
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createSku(data: SkuCreateInput!): Sku!
  createSkuPackage(data: SkuPackageCreateInput!): SkuPackage!
  createUser(data: UserCreateInput!): User!
  deleteSku(where: SkuWhereUniqueInput!): Sku!
  deleteSkuPackage(where: SkuPackageWhereUniqueInput!): SkuPackage!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateSku(data: SkuUpdateInput!, where: SkuWhereUniqueInput!): Sku!
  updateSkuPackage(data: SkuPackageUpdateInput!, where: SkuPackageWhereUniqueInput!): SkuPackage!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _skuPackagesMeta(orderBy: [SkuPackageOrderByInput!], skip: Float, take: Float, where: SkuPackageWhereInput): MetaQueryPayload!
  _skusMeta(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  sku(where: SkuWhereUniqueInput!): Sku
  skuPackage(where: SkuPackageWhereUniqueInput!): SkuPackage
  skuPackages(orderBy: [SkuPackageOrderByInput!], skip: Float, take: Float, where: SkuPackageWhereInput): [SkuPackage!]!
  skus(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): [Sku!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Sku {
  createdAt: DateTime!
  fulfillmentInfo: JSONObject
  id: String!
  packages: SkuPackage
  skuDescription: String
  skuId: String
  skuName: String
  skuPackages(orderBy: [SkuPackageOrderByInput!], skip: Float, take: Float, where: SkuPackageWhereInput): [SkuPackage!]!
  skuType: EnumSkuSkuType
  updatedAt: DateTime!
}

input SkuCreateInput {
  fulfillmentInfo: JSONObject
  packages: SkuPackageWhereUniqueInput
  skuDescription: String
  skuId: String
  skuName: String
  skuPackages: SkuPackageCreateNestedManyWithoutSkusInput
  skuType: EnumSkuSkuType
}

input SkuCreateNestedManyWithoutSkuPackagesInput {
  connect: [SkuWhereUniqueInput!]
}

input SkuListRelationFilter {
  every: SkuWhereInput
  none: SkuWhereInput
  some: SkuWhereInput
}

input SkuOrderByInput {
  createdAt: SortOrder
  fulfillmentInfo: SortOrder
  id: SortOrder
  packagesId: SortOrder
  skuDescription: SortOrder
  skuId: SortOrder
  skuName: SortOrder
  skuType: SortOrder
  updatedAt: SortOrder
}

type SkuPackage {
  createdAt: DateTime!
  id: String!
  sku: Sku
  skus(orderBy: [SkuOrderByInput!], skip: Float, take: Float, where: SkuWhereInput): [Sku!]!
  updatedAt: DateTime!
}

input SkuPackageCreateInput {
  sku: SkuWhereUniqueInput
  skus: SkuCreateNestedManyWithoutSkuPackagesInput
}

input SkuPackageCreateNestedManyWithoutSkusInput {
  connect: [SkuPackageWhereUniqueInput!]
}

input SkuPackageListRelationFilter {
  every: SkuPackageWhereInput
  none: SkuPackageWhereInput
  some: SkuPackageWhereInput
}

input SkuPackageOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  skuId: SortOrder
  updatedAt: SortOrder
}

input SkuPackageUpdateInput {
  sku: SkuWhereUniqueInput
  skus: SkuUpdateManyWithoutSkuPackagesInput
}

input SkuPackageUpdateManyWithoutSkusInput {
  connect: [SkuPackageWhereUniqueInput!]
  disconnect: [SkuPackageWhereUniqueInput!]
  set: [SkuPackageWhereUniqueInput!]
}

input SkuPackageWhereInput {
  id: StringFilter
  sku: SkuWhereUniqueInput
  skus: SkuListRelationFilter
}

input SkuPackageWhereUniqueInput {
  id: String!
}

input SkuUpdateInput {
  fulfillmentInfo: JSONObject
  packages: SkuPackageWhereUniqueInput
  skuDescription: String
  skuId: String
  skuName: String
  skuPackages: SkuPackageUpdateManyWithoutSkusInput
  skuType: EnumSkuSkuType
}

input SkuUpdateManyWithoutSkuPackagesInput {
  connect: [SkuWhereUniqueInput!]
  disconnect: [SkuWhereUniqueInput!]
  set: [SkuWhereUniqueInput!]
}

input SkuWhereInput {
  fulfillmentInfo: JsonFilter
  id: StringFilter
  packages: SkuPackageWhereUniqueInput
  skuDescription: StringNullableFilter
  skuId: StringNullableFilter
  skuName: StringNullableFilter
  skuPackages: SkuPackageListRelationFilter
  skuType: EnumSkuSkuType
}

input SkuWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  uid: String
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  uid: String
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  uid: String
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  uid: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
