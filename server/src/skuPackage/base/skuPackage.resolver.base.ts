/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSkuPackageArgs } from "./CreateSkuPackageArgs";
import { UpdateSkuPackageArgs } from "./UpdateSkuPackageArgs";
import { DeleteSkuPackageArgs } from "./DeleteSkuPackageArgs";
import { SkuPackageFindManyArgs } from "./SkuPackageFindManyArgs";
import { SkuPackageFindUniqueArgs } from "./SkuPackageFindUniqueArgs";
import { SkuPackage } from "./SkuPackage";
import { SkuFindManyArgs } from "../../sku/base/SkuFindManyArgs";
import { Sku } from "../../sku/base/Sku";
import { SkuPackageService } from "../skuPackage.service";

@graphql.Resolver(() => SkuPackage)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SkuPackageResolverBase {
  constructor(
    protected readonly service: SkuPackageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SkuPackage",
    action: "read",
    possession: "any",
  })
  async _skuPackagesMeta(
    @graphql.Args() args: SkuPackageFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SkuPackage])
  @nestAccessControl.UseRoles({
    resource: "SkuPackage",
    action: "read",
    possession: "any",
  })
  async skuPackages(
    @graphql.Args() args: SkuPackageFindManyArgs
  ): Promise<SkuPackage[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SkuPackage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkuPackage",
    action: "read",
    possession: "own",
  })
  async skuPackage(
    @graphql.Args() args: SkuPackageFindUniqueArgs
  ): Promise<SkuPackage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SkuPackage)
  @nestAccessControl.UseRoles({
    resource: "SkuPackage",
    action: "create",
    possession: "any",
  })
  async createSkuPackage(
    @graphql.Args() args: CreateSkuPackageArgs
  ): Promise<SkuPackage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        sku: args.data.sku
          ? {
              connect: args.data.sku,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SkuPackage)
  @nestAccessControl.UseRoles({
    resource: "SkuPackage",
    action: "update",
    possession: "any",
  })
  async updateSkuPackage(
    @graphql.Args() args: UpdateSkuPackageArgs
  ): Promise<SkuPackage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          sku: args.data.sku
            ? {
                connect: args.data.sku,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SkuPackage)
  @nestAccessControl.UseRoles({
    resource: "SkuPackage",
    action: "delete",
    possession: "any",
  })
  async deleteSkuPackage(
    @graphql.Args() args: DeleteSkuPackageArgs
  ): Promise<SkuPackage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sku])
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "read",
    possession: "any",
  })
  async skus(
    @graphql.Parent() parent: SkuPackage,
    @graphql.Args() args: SkuFindManyArgs
  ): Promise<Sku[]> {
    const results = await this.service.findSkus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sku, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "read",
    possession: "any",
  })
  async sku(@graphql.Parent() parent: SkuPackage): Promise<Sku | null> {
    const result = await this.service.getSku(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
