/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSkuSubGroupArgs } from "./CreateSkuSubGroupArgs";
import { UpdateSkuSubGroupArgs } from "./UpdateSkuSubGroupArgs";
import { DeleteSkuSubGroupArgs } from "./DeleteSkuSubGroupArgs";
import { SkuSubGroupFindManyArgs } from "./SkuSubGroupFindManyArgs";
import { SkuSubGroupFindUniqueArgs } from "./SkuSubGroupFindUniqueArgs";
import { SkuSubGroup } from "./SkuSubGroup";
import { SkuFindManyArgs } from "../../sku/base/SkuFindManyArgs";
import { Sku } from "../../sku/base/Sku";
import { SkuGroup } from "../../skuGroup/base/SkuGroup";
import { SkuSubGroupService } from "../skuSubGroup.service";

@graphql.Resolver(() => SkuSubGroup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SkuSubGroupResolverBase {
  constructor(
    protected readonly service: SkuSubGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroup",
    action: "read",
    possession: "any",
  })
  async _skuSubGroupsMeta(
    @graphql.Args() args: SkuSubGroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SkuSubGroup])
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroup",
    action: "read",
    possession: "any",
  })
  async skuSubGroups(
    @graphql.Args() args: SkuSubGroupFindManyArgs
  ): Promise<SkuSubGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SkuSubGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroup",
    action: "read",
    possession: "own",
  })
  async skuSubGroup(
    @graphql.Args() args: SkuSubGroupFindUniqueArgs
  ): Promise<SkuSubGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SkuSubGroup)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroup",
    action: "create",
    possession: "any",
  })
  async createSkuSubGroup(
    @graphql.Args() args: CreateSkuSubGroupArgs
  ): Promise<SkuSubGroup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        skuGroupId: args.data.skuGroupId
          ? {
              connect: args.data.skuGroupId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SkuSubGroup)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroup",
    action: "update",
    possession: "any",
  })
  async updateSkuSubGroup(
    @graphql.Args() args: UpdateSkuSubGroupArgs
  ): Promise<SkuSubGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          skuGroupId: args.data.skuGroupId
            ? {
                connect: args.data.skuGroupId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SkuSubGroup)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroup",
    action: "delete",
    possession: "any",
  })
  async deleteSkuSubGroup(
    @graphql.Args() args: DeleteSkuSubGroupArgs
  ): Promise<SkuSubGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sku])
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "read",
    possession: "any",
  })
  async skus(
    @graphql.Parent() parent: SkuSubGroup,
    @graphql.Args() args: SkuFindManyArgs
  ): Promise<Sku[]> {
    const results = await this.service.findSkus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SkuGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkuGroup",
    action: "read",
    possession: "any",
  })
  async skuGroupId(
    @graphql.Parent() parent: SkuSubGroup
  ): Promise<SkuGroup | null> {
    const result = await this.service.getSkuGroupId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
