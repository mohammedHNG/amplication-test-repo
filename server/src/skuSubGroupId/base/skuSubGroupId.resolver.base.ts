/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSkuSubGroupIdArgs } from "./CreateSkuSubGroupIdArgs";
import { UpdateSkuSubGroupIdArgs } from "./UpdateSkuSubGroupIdArgs";
import { DeleteSkuSubGroupIdArgs } from "./DeleteSkuSubGroupIdArgs";
import { SkuSubGroupIdFindManyArgs } from "./SkuSubGroupIdFindManyArgs";
import { SkuSubGroupIdFindUniqueArgs } from "./SkuSubGroupIdFindUniqueArgs";
import { SkuSubGroupId } from "./SkuSubGroupId";
import { SkuFindManyArgs } from "../../sku/base/SkuFindManyArgs";
import { Sku } from "../../sku/base/Sku";
import { SkuGroup } from "../../skuGroup/base/SkuGroup";
import { SkuSubGroupIdService } from "../skuSubGroupId.service";

@graphql.Resolver(() => SkuSubGroupId)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SkuSubGroupIdResolverBase {
  constructor(
    protected readonly service: SkuSubGroupIdService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroupId",
    action: "read",
    possession: "any",
  })
  async _skuSubGroupIdsMeta(
    @graphql.Args() args: SkuSubGroupIdFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SkuSubGroupId])
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroupId",
    action: "read",
    possession: "any",
  })
  async skuSubGroupIds(
    @graphql.Args() args: SkuSubGroupIdFindManyArgs
  ): Promise<SkuSubGroupId[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SkuSubGroupId, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroupId",
    action: "read",
    possession: "own",
  })
  async skuSubGroupId(
    @graphql.Args() args: SkuSubGroupIdFindUniqueArgs
  ): Promise<SkuSubGroupId | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SkuSubGroupId)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroupId",
    action: "create",
    possession: "any",
  })
  async createSkuSubGroupId(
    @graphql.Args() args: CreateSkuSubGroupIdArgs
  ): Promise<SkuSubGroupId> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        skuGroupId: args.data.skuGroupId
          ? {
              connect: args.data.skuGroupId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SkuSubGroupId)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroupId",
    action: "update",
    possession: "any",
  })
  async updateSkuSubGroupId(
    @graphql.Args() args: UpdateSkuSubGroupIdArgs
  ): Promise<SkuSubGroupId | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          skuGroupId: args.data.skuGroupId
            ? {
                connect: args.data.skuGroupId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SkuSubGroupId)
  @nestAccessControl.UseRoles({
    resource: "SkuSubGroupId",
    action: "delete",
    possession: "any",
  })
  async deleteSkuSubGroupId(
    @graphql.Args() args: DeleteSkuSubGroupIdArgs
  ): Promise<SkuSubGroupId | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sku])
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "read",
    possession: "any",
  })
  async skus(
    @graphql.Parent() parent: SkuSubGroupId,
    @graphql.Args() args: SkuFindManyArgs
  ): Promise<Sku[]> {
    const results = await this.service.findSkus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SkuGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkuGroup",
    action: "read",
    possession: "any",
  })
  async skuGroupId(
    @graphql.Parent() parent: SkuSubGroupId
  ): Promise<SkuGroup | null> {
    const result = await this.service.getSkuGroupId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
