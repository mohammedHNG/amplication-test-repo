/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SkuService } from "../sku.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SkuCreateInput } from "./SkuCreateInput";
import { SkuWhereInput } from "./SkuWhereInput";
import { SkuWhereUniqueInput } from "./SkuWhereUniqueInput";
import { SkuFindManyArgs } from "./SkuFindManyArgs";
import { SkuUpdateInput } from "./SkuUpdateInput";
import { Sku } from "./Sku";
import { MapSkusToPackageFindManyArgs } from "../../mapSkusToPackage/base/MapSkusToPackageFindManyArgs";
import { MapSkusToPackage } from "../../mapSkusToPackage/base/MapSkusToPackage";
import { MapSkusToPackageWhereUniqueInput } from "../../mapSkusToPackage/base/MapSkusToPackageWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SkuControllerBase {
  constructor(
    protected readonly service: SkuService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sku })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: SkuCreateInput): Promise<Sku> {
    return await this.service.create({
      data: {
        ...data,

        skuGroupId: data.skuGroupId
          ? {
              connect: data.skuGroupId,
            }
          : undefined,

        skuSubGroupId: data.skuSubGroupId
          ? {
              connect: data.skuSubGroupId,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        fulfillmentInfo: true,
        id: true,
        skuDescription: true,

        skuGroupId: {
          select: {
            id: true,
          },
        },

        skuName: true,

        skuSubGroupId: {
          select: {
            id: true,
          },
        },

        skuType: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Sku] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(SkuFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Sku[]> {
    const args = plainToClass(SkuFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        fulfillmentInfo: true,
        id: true,
        skuDescription: true,

        skuGroupId: {
          select: {
            id: true,
          },
        },

        skuName: true,

        skuSubGroupId: {
          select: {
            id: true,
          },
        },

        skuType: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sku })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: SkuWhereUniqueInput
  ): Promise<Sku | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        fulfillmentInfo: true,
        id: true,
        skuDescription: true,

        skuGroupId: {
          select: {
            id: true,
          },
        },

        skuName: true,

        skuSubGroupId: {
          select: {
            id: true,
          },
        },

        skuType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sku })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: SkuWhereUniqueInput,
    @common.Body() data: SkuUpdateInput
  ): Promise<Sku | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          skuGroupId: data.skuGroupId
            ? {
                connect: data.skuGroupId,
              }
            : undefined,

          skuSubGroupId: data.skuSubGroupId
            ? {
                connect: data.skuSubGroupId,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          fulfillmentInfo: true,
          id: true,
          skuDescription: true,

          skuGroupId: {
            select: {
              id: true,
            },
          },

          skuName: true,

          skuSubGroupId: {
            select: {
              id: true,
            },
          },

          skuType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sku })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: SkuWhereUniqueInput
  ): Promise<Sku | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          fulfillmentInfo: true,
          id: true,
          skuDescription: true,

          skuGroupId: {
            select: {
              id: true,
            },
          },

          skuName: true,

          skuSubGroupId: {
            select: {
              id: true,
            },
          },

          skuType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "MapSkusToPackage",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/mapSkusToPackages")
  @ApiNestedQuery(MapSkusToPackageFindManyArgs)
  async findManyMapSkusToPackages(
    @common.Req() request: Request,
    @common.Param() params: SkuWhereUniqueInput
  ): Promise<MapSkusToPackage[]> {
    const query = plainToClass(MapSkusToPackageFindManyArgs, request.query);
    const results = await this.service.findMapSkusToPackages(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        packageId: {
          select: {
            id: true,
          },
        },

        skuId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/mapSkusToPackages")
  async connectMapSkusToPackages(
    @common.Param() params: SkuWhereUniqueInput,
    @common.Body() body: MapSkusToPackageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mapSkusToPackages: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/mapSkusToPackages")
  async updateMapSkusToPackages(
    @common.Param() params: SkuWhereUniqueInput,
    @common.Body() body: MapSkusToPackageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mapSkusToPackages: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Sku",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/mapSkusToPackages")
  async disconnectMapSkusToPackages(
    @common.Param() params: SkuWhereUniqueInput,
    @common.Body() body: MapSkusToPackageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mapSkusToPackages: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
